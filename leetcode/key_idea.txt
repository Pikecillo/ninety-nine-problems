001 - Brute force is enough for solution. Solution could be improved with a
      hash map.
002 - Just implement addition algorithm over single linked lists.
003 - Keep track of seen characters in a hash table or array.

020 - Use a stack to pair parentheses.

100 - Pre-order Traversal
101 - Pre-order Traversal
102 - Breadth-first Traversal
103 - Breadth-first Traversal
104 - Post-order Traversal
105 - Divide-and-conquer
106 - Divide-and-conquer
107 - Breadth-first Traversal
108 - Divide-and-conquer
109 - Divide-and-conquer
110 - Pre-order and Post-order Traversal
111 - Post-order Traversal
112 - Pre-order Traversal
113 - Pre-order Traversal
114 - Post-order Traversal
115 - Dynamic Programming
116 - Breadth-first Traversal
117 - Breadth-first Traversal
118 - Ad-hoc
119 - Ad-hoc
120 - Dynamic Programming
121 - Ad hoc
122 - Ad hoc
123 - Ad hoc
124 - Post-order Traversal
125 - Ad hoc
126 - Breadth-first Search
127 - Breadth-first Search
128 - Hash Table
129 - Pre-order Traversal
130 - Breadth-first Traversal
131 -
132 -
133 - Breadth-first Traversal
134 -
135 - Ad-hoc
136 - Bitwise Operations
137 - Bitwise Operations
138 -
139 -
140 -
141 - Ad-hoc
142 -
143 - Array
144 - Depth-first Traversal
145 - Modified Depth-first Traversal
146 -
147 - Insertion Sort
148 - Merge Sort
149 - Ad-hoc
150 -

190 - Bitwise Operations

206 - Ad-hoc

344 - Ad-hoc: swap elements
345 - Ad-hoc: swap elements
